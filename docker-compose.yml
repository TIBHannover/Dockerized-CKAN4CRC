version: "3"

volumes:
  ckan_config:
  ckan_home:
  ckan_storage:
  pg_data:
  pg_datapusher_data:
  solr_data:

services:
  nginx:
    container_name: nginx
    build:
      context: nginx/
      dockerfile: Dockerfile
    links:
      - ckan
    ports:
      - "0.0.0.0:8001:80"
      - "0.0.0.0:8002:8800"
    networks:
      - crc

  ckan:
    container_name: ckan
    tty: true
    build:
      context: ./ckan
      args:
       - DB_PATH=${CKAN_SQLALCHEMY_URL}
       - CKAN_Site_Url=${CKAN_SITE_URL}
       - SOLR_URL=${CKAN_SOLR_URL}
       - CKAN_MAX_RESOURCE_SIZE=${CKAN_MAX_RESOURCE_SIZE}
       - ALLOW_COLLABORATION=${ALLOW_COLLABORATION}
       - CKAN_SITE_ID=${CKAN_SITE_ID}
       - CKAN_MAX_IMAGE_SIZE=${CKAN_MAX_IMAGE_SIZE}
       - REDIS_URL=${REDIS_URL}
       - APP_DIR=${APP_DIR}
    depends_on: 
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
    ports:
      - "8080"
    networks:      
      - crc

    volumes:
      - ckan_config:/usr/lib/ckan/default/config/
      - ckan_home:/usr/lib/ckan
      - ckan_storage:/var/lib/ckan

    
  datapusher:
    container_name: datapusher
    image: ckan/ckan-base-datapusher:${DATAPUSHER_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8800"]
    networks:      
      - crc    

  db:
    container_name: db
    build:
      context: postgresql/
      args:
       - DATASTORE_READONLY_PASSWORD=${DATASTORE_READONLY_PASSWORD}
       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    environment:
      - DATASTORE_READONLY_PASSWORD=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/db
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ckan"]
    networks:      
      - crc
     
  solr:
    container_name: solr
    build:
      context: ./solr
      dockerfile: ./Dockerfile
    ports: 
      - "8983"
    networks:
      - crc
    healthcheck:
      test: >-
        curl -s -w "%{http_code}\n" http://localhost:8983/solr -o /dev/null -L \
        | grep -q "200"
      interval: 10s
      timeout: 10s
      retries: 10


  redis:
    container_name: redis
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-e", "QUIT"]
    networks:      
      - crc
  

networks:
  crc:



  